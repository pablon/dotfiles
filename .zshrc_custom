######################################################################
# Colors:
export BLUE="\033[1;94m"
export BOLD="\033[1;37m"
export CYAN="\033[1;96m"
export GREEN="\033[1;92m"
export MAGENTA="\033[1;95m"
export PURPLE="\033[1;35m"
export RED="\033[1;31m"
export YELLOW="\033[1;93m"
export NONE="\033[0m"

######################################################################
# clipboard tool
_clipboardApp="$(if ( command xclip -v &>/dev/null ) ; then echo xclip ; elif ( type pbcopy &>/dev/null ) ; then echo pbcopy ; fi)"

######################################################################
# load custom aliases & functions
ALIASES_WORK="${HOME}/.aliases_work"
SECRETS_FILE="${HOME}/.secrets"
for file in ${HOME}/{.aliases,.functions} "${ALIASES_WORK}" "${SECRETS_FILE}" ; do
  [ -r "${file}" ] && source "${file}"
done ; unset file

######################################################################
# zsh
export HISTFILE=~/.zsh_history
export HISTSIZE=13000
export SAVEHIST=10000
setopt APPEND_HISTORY          # append to history file
setopt EXTENDED_HISTORY        # Write the history file in the ':start:elapsed;command' format.
setopt HIST_EXPIRE_DUPS_FIRST  # Expire a duplicate event first when trimming history.
setopt HIST_FIND_NO_DUPS       # Do not display a previously found event.
setopt HIST_IGNORE_ALL_DUPS    # Delete an old recorded event if a new event is a duplicate.
setopt HIST_IGNORE_DUPS        # Do not record an event that was just recorded again.
setopt HIST_IGNORE_SPACE       # Do not record an event starting with a space.
setopt HIST_NO_FUNCTIONS       # don't store function definitions
setopt HIST_NO_STORE           # Don't store history commands
setopt HIST_REDUCE_BLANKS      # remove unnecessary blanks
setopt HIST_SAVE_NO_DUPS       # Do not write a duplicate event to the history file.
setopt HIST_VERIFY             # Do not execute immediately upon history expansion.
setopt INC_APPEND_HISTORY      # Write to the history file immediately, not when the shell exits.
setopt INC_APPEND_HISTORY_TIME # append command to history file immediately after execution
setopt SHARE_HISTORY           # Share history between all sessions.
unsetopt menu_complete         # do not autoselect the first completion entry
unsetopt flowcontrol
setopt auto_menu               # show completion menu on successive tab press
setopt complete_in_word
setopt always_to_end
# async mode for autocompletion
export ZSH_AUTOSUGGEST_USE_ASYNC=true
export ZSH_HIGHLIGHT_MAXLENGTH=300

# case insensitive path-completion
zstyle ':completion:*' matcher-list 'm:{[:lower:][:upper:]}={[:upper:][:lower:]}' 'r:|=*' 'l:|=* r:|=*'
zstyle ':completion:*' complete-options true
zstyle ':completion:*' file-sort modification
zstyle ':completion:*' menu select
zstyle ':completion:*' squeeze-slashes true
zstyle ':completion:*:*:*:*:corrections' format '%F{yellow}!- %d (errors: %e) -!%f'
zstyle ':completion:*:*:*:*:descriptions' format '%F{green}-- %d --%f'
zstyle ':completion:*:*:-command-:*:*' group-order alias builtins functions commands
zstyle ':completion:*:*:cp:*' file-sort modification reverse
zstyle ':completion:*:messages' format ' %F{purple} -- %d --%f'
zstyle ':completion:*:warnings' format ' %F{red}-- no matches found --%f'
zstyle ':completion:*' verbose true

export XDG_CONFIG_HOME="${HOME}/.config"

# TERM
export TERM="xterm-256color"

# export PATH
PATH_DIRS=(
  "/usr/games"
  "/usr/local/sbin"
  "${HOME}/.asdf/shims"
  "${HOME}/.docker/bin"
  "${HOME}/.krew/bin"
  "${HOME}/.local/bin"
  "${HOME}/bin"
  "${HOME}/go/bin"
)
for i in "${PATH_DIRS[@]}"; do
  [ -d "${i}" ] && PATH+=":${i}"
done
export PATH="${PATH}"

# export FPATH
FPATH_DIRS=(
  "$(brew --prefix)/share/zsh/site-functions"
  "${HOME}/.docker/completions"
  "${HOME}/.zsh/zsh-completions/src"
)
for i in "${FPATH_DIRS[@]}"; do
  [ -d "${i}" ] && FPATH+=":${i}"
done
export FPATH="${FPATH}"

# compinit (if having issues, delete ~/.zcompdump and re-run to rebuild)
autoload bashcompinit && bashcompinit
autoload -Uz compinit && compinit

# You may need to manually set your MANPATH
export MANPATH="/usr/local/man:${MANPATH}"

# You may need to manually set your language environment
export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
export EDITOR='nvim'
export VISUAL="${EDITOR}"

# homebrew stuff
export HOMEBREW_NO_ENV_HINTS=1
export HOMEBREW_NO_ANALYTICS=1

# iTerm2 Shell Integration
if [[ -n "${ITERM_SESSION_ID}" ]] && [[ -f "${HOME}/.config/iterm2/shell_integration.zsh" ]] ; then
  source "${HOME}/.config/iterm2/shell_integration.zsh"
fi

# Docker stuff
export BUILDKIT_COLORS="run=light-blue:error=light-red:cancel=light-magenta:warning=light-yellow"

# .Net stuff
export DOTNET_CLI_TELEMETRY_OPTOUT=1

# fzf
# https://github.com/junegunn/fzf#fuzzy-completion-for-bash-and-zsh
if ( type fzf &>/dev/null ) ; then

  source <(fzf --$(basename $SHELL) 2>/dev/null)

  export FZF_DEFAULT_COMMAND="fd --type f --strip-cwd-prefix --hidden --follow --exclude '.git' --exclude 'node_modules' --one-file-system"

  export FZF_COLORS="--color=fg:#cdd6f4,fg+:#f9e2af,bg:#121212,bg+:#313244
  --color=hl:#5f87af,hl+:#5fd7ff,info:#afaf87,marker:#87ff00
  --color=preview-fg:#f5e0dc,preview-bg:#2E3440,label:#cba6f7,spinner:cyan
  --color=header:#cba6f7,prompt:#cba6f7,pointer:#cba6f7,scrollbar:#fab387"

  # icons: ◆ ← ▶ ❯ ✘
  export FZF_DEFAULT_OPTS="${FZF_COLORS} --border='rounded' --border-label=''
  --preview-window='border-double'
  --bind='ctrl-p:change-preview-window(50%,down|50%,right)'
  --marker='✘' --pointer='❯' --separator='─'
  --scrollbar='│' --style=full --cycle"

  export FZF_CTRL_T_OPTS="--walker-skip .git,node_modules,target
  --preview 'bat -n --color=always {}'
  --bind 'ctrl-/:change-preview-window(down|hidden|)'"

  export FZF_ALT_C_COMMAND="fd --type d --hidden --follow --exclude .git . | awk -F'/' '{print NF-1, \$0}' | sort -n | cut -d' ' -f2-"

  export FZF_COMPLETION_OPTS='--border'
  export FZF_COMPLETION_DIR_COMMANDS="cd pushd rmdir tree"
fi

######################################################################
# asdf
if ( type asdf &>/dev/null ) ; then
  case "$(uname)" in
    Linux)
      ASDF_SCRIPT="/opt/asdf-vm/asdf.sh"
      [ -x "${ASDF_SCRIPT}" ] && source "${ASDF_SCRIPT}"
      ;;
  esac
fi

######################################################################
# less tweaks
export LESS='-asrRix8'
export LESSCHARSET='utf-8'

# color manpage
export LESS_TERMCAP_mb=$'\E[01;31m'         # begin blinking
export LESS_TERMCAP_md=$'\E[01;38;5;208m'   # begin bold
export LESS_TERMCAP_me=$'\E[0m'             # end mode
export LESS_TERMCAP_se=$'\E[0m'             # end standout-mode
export LESS_TERMCAP_so=$'\E[38;07;246m'     # begin standout-mode - info box
export LESS_TERMCAP_ue=$'\E[0m'             # end underline
export LESS_TERMCAP_us=$'\E[04;38;5;111m'   # begin underline

######################################################################
# auto completion
AUTO_COMPLETION=(docker helm kubectl)
for app in ${AUTO_COMPLETION} ; do
  ( type ${app} &>/dev/null ) && source <(${app} completion zsh)
done ; unset app

for app in gh glab ; do
  ( type ${app} &>/dev/null ) && source <(${app} completion -s zsh)
done ; unset app

( type aws_completer &>/dev/null ) && complete -C "$(which aws_completer)" aws
( type kops &>/dev/null ) && source <(kops completion zsh)
( type op &>/dev/null ) && eval "$(\op completion zsh)"; compdef _op op
( type stern &>/dev/null ) && source <(stern --completion zsh)
( type zoxide &>/dev/null ) && eval "$(zoxide init zsh)"

######################################################################
# ssh-add
[[ "$(uname)" == "Darwin" ]] && ssh-add --apple-load-keychain &>/dev/null

######################################################################
