set -a

# https://docs.github.com/rest/overview/resources-in-the-rest-api#rate-limiting
if [ "${GITHUB_TOKEN}" ]; then
	# export GITHUB_AUTH="-H 'Authorization: Bearer ${GITHUB_TOKEN}'"
	export GITHUB_AUTH="-H 'Authorization: token ${GITHUB_TOKEN}'"
fi
# Colors:
export STRONG="\033[1;37m"
export RED="\033[1;31m"
export GREEN="\033[1;92m"
export YELLOW="\033[1;93m"
export BLUE="\033[1;94m"
export MAGENTA="\033[1;95m"
export CYAN="\033[1;96m"
export NONE="\033[0m"

# pkg managers cli opts
export APT_OPTS="-yqq"
export DEBIAN_FRONTEND="noninteractive"
export DNF_OPTS="--skip-broken -y"
export PACMAN_OPTS="--noconfirm --noprogressbar --needed --color always --disable-download-timeout"

# this allows us to debug as root when SUDOis not set
[[ "$(id -u)" -ne "0" ]] && export SUDO="sudo"

# multi purpose banners
function _info() {
  divider
  echo -e "${BLUE}==>  ${STRONG}${1}${NONE}"
}

function _warning() {
  divider
  echo -e "${YELLOW}==>  ${1}${NONE}"
}

function _success() {
  echo -e "${GREEN}==> ✔ ${1}${NONE}"
}

function _error() {
  echo -e "${RED}==> ✘ ${MAGENTA}${1}${NONE}\n"
}

function divider() {
  local COLUMNS=80
  eval "printf '─%.0s' {1..$COLUMNS}"
  echo
}

# detect os
function detect_os() {
  case "$(uname)" in
    Darwin)
      export OS="darwin"
      ;;
    Linux)
      source /etc/os-release || exit 1
      case "${ID}" in
        arch|debian|ubuntu|fedora|rocky|almalinux)
          export OS="${ID}"
          ;;
        *)
          echo "${ID} OS not supported"
          exit 1
          ;;
      esac
      ;;
  esac
}

# detect swl
is_wsl() {
	case "$(uname -r)" in
    'Microsoft'|'microsoft') true ;;
    *) false;;
	esac
}

# standard pkg install for each os flavour
function install_pkg_darwin() {
  brew install "${@}"
}

function install_pkg_debian() {
	${SUDO} apt-get update ${APT_OPTS} &&
	${SUDO} apt-get install ${APT_OPTS} "${@}"
}

install_pkg_ubuntu() {
	install_pkg_debian "$@"
}

function install_pkg_arch() {
	${SUDO} pacman ${PACMAN_OPTS} -Syy &>/dev/null &&
	${SUDO} pacman ${PACMAN_OPTS} -Sy "${@}"
}

function install_pkg_manjaro() {
	install_pkg_arch "$@"
}

function install_pkg_rhel() {
	${SUDO} dnf install ${DNF_OPTS} "${@}"
}

function install_pkg_fedora() {
	install_pkg_rhel "$@"
}

function install_pkg_rocky() {
	install_pkg_rhel "$@"
}

function install_pkg_almalinux() {
	install_pkg_rhel "$@"
}

function install_pkg_asdf() {
  local SCOPE="-u"
  asdf plugin add ${*} 2>/dev/null
  local LATEST="latest"
  echo
  _info "ASDF :: installing ${YELLOW}${*} ${GREEN}${LATEST}"
  asdf install "${@}" ${LATEST} || {
    # get the latest plugin version
    local LATEST="$(asdf list all "${@}" | sort -nr | head -1 | xargs)"
    echo
    _info "ASDF :: installing ${YELLOW}${*} ${CYAN}${LATEST}"
    asdf install "${@}" ${LATEST} || _error "Could not install ${YELLOW}${*} ${CYAN}${LATEST}"
  }
  asdf set ${SCOPE} "${@}" ${LATEST}
}
